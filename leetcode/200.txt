class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        //stack<pair<int,int> >res;
        int i,j,x,y;
        int lenr = grid.size();
        if(lenr<1)return 0;
        int lenl = grid[0].size();
        int count=0;
        queue<pair<int,int > >que;
        pair<int,int>tmp;
        tmp = check(grid);
        if(tmp.first==-1) return 0;
        que.push(tmp);

        while(tmp.first!=-1){
            
            while(!que.empty()){
            tmp = que.front();
            que.pop();
            x = tmp.first;
            y = tmp.second;
            if(x-1>=0){
                    if(grid[x-1][y]=='1'){
                        grid[x-1][y]='0';
                        que.push(make_pair(x-1,y));
                    }
                }
            if(x+1<lenr){
                if(grid[x+1][y]=='1'){
                        grid[x+1][y]='0';
                        que.push(make_pair(x+1,y));
                    }
            }
            if(y-1>=0){
                if(grid[x][y-1]=='1'){
                        grid[x][y-1]='0';
                        que.push(make_pair(x,y-1));
                    }
            }
            if(y+1<lenl){
                if(grid[x][y+1]=='1'){
                        grid[x][y+1]='0';
                        que.push(make_pair(x,y+1));
                    }
            }
            
            }
            tmp = check(grid);
            que.push(tmp);
            count++;
        }
        return count;
    }
    pair<int,int> check(vector<vector<char> >&grid){
        int i,j;
        int lenr = grid.size();
        if(lenr<1)return make_pair(-1,-1);
        int lenl = grid[0].size();
        int count=0;
        pair<int,int>tmp;

       for(i=0;i<lenr;i++){
            for(j=0;j<lenl;j++){
                if(grid[i][j]=='1'){
                    count=1;
                    grid[i][j]='0';
                    return make_pair(i,j);
                    
                }
            }
        }
        
        return make_pair(-1,-1);
    }
};